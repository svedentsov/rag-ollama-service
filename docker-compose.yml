# Версия синтаксиса Docker Compose
version: '3.8'

# Определение сервисов (контейнеров)
services:

  # Сервис PostgreSQL с расширением pgvector
  postgres:
    # Используем официальный образ pgvector, который включает PostgreSQL и расширение
    image: pgvector/pgvector:pg16
    container_name: rag-postgres
    # Переменные окружения для настройки PostgreSQL
    environment:
      # Имя пользователя базы данных
      - POSTGRES_USER=user
      # Пароль для пользователя
      - POSTGRES_PASSWORD=password
      # Имя создаваемой по умолчанию базы данных
      - POSTGRES_DB=ragdb
    # Проброс портов: <порт на хосте>:<порт в контейнере>
    # Позволяет нашему приложению, запущенному на хосте, подключаться к БД в контейнере
    ports:
      - "5432:5432"
    # Тома (volumes) для сохранения данных между перезапусками контейнера
    volumes:
      # Именованный том для хранения данных PostgreSQL
      - postgres-data:/var/lib/postgresql/data
    # Политика перезапуска контейнера в случае сбоя
    restart: unless-stopped
    # Проверка состояния. Docker будет считать сервис "здоровым",
    # если команда pg_isready успешно выполняется.
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d ragdb" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    # Сеть, к которой будет подключен контейнер
    networks:
      - rag-net

  # Сервис Ollama для запуска локальных LLM
  ollama:
    # Используем официальный образ Ollama
    image: ollama/ollama
    container_name: rag-ollama
    # Проброс порта API Ollama
    ports:
      - "11434:11434"
    # Том для сохранения загруженных моделей
    volumes:
      - ollama-data:/root/.ollama
    restart: unless-stopped
    # Проверка состояния. Проверяем, что API Ollama отвечает.
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:11434/api/tags" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - rag-net

  # Сервис RabbitMQ для управления очередями событий
  rabbitmq:
    # Используем образ с плагином management для веб-интерфейса
    image: rabbitmq:3.13-management
    container_name: rag-rabbitmq
    ports:
      # Порт для подключения клиентов (наше Spring приложение)
      - "5672:5672"
      # Порт для веб-интерфейса управления
      - "15672:15672"
    # Том для сохранения состояния RabbitMQ
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    # Настройки по умолчанию (можно переопределить)
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    restart: unless-stopped
    healthcheck:
      # Проверяем, что брокер доступен и работает
      test: [ "CMD", "rabbitmq-diagnostics", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - rag-net

# Определение именованных томов
volumes:
  postgres-data:
    driver: local
  ollama-data:
    driver: local
  rabbitmq-data:
    driver: local

# Определение сетей
networks:
  rag-net:
    driver: bridge
