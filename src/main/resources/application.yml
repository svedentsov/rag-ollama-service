# ===================================================================
# Основные настройки сервера
# ===================================================================
server:
  port: 8080
  # Включаем отображение стектрейса только при наличии параметра ?trace=true. Безопасная практика.
  error:
    include-stacktrace: on_param

# ===================================================================
# Настройки Spring Boot
# ===================================================================
spring:
  application:
    name: rag-ollama-service

  # --- Настройки подключения к базе данных (PostgreSQL) ---
  datasource:
    # URL будет указывать на контейнер Docker, который мы определим в docker-compose.yml
    url: jdbc:postgresql://localhost:5432/ragdb
    username: user
    password: password
    driver-class-name: org.postgresql.Driver

  # --- Настройки JPA и Hibernate ---
  jpa:
    # 'validate' - лучшая практика для продакшена с Flyway. Hibernate проверит,
    # что схема БД соответствует сущностям, но не будет ее изменять.
    hibernate:
      ddl-auto: validate
    # Показываем SQL-запросы в логах для удобства разработки
    show-sql: true
    properties:
      hibernate:
        format_sql: true # Форматируем SQL для лучшей читаемости

  # --- Настройки миграций базы данных Flyway ---
  flyway:
    enabled: true
    # Путь к SQL-миграциям в classpath
    locations: classpath:db/migration

  # ===================================================================
  # Настройки Spring AI
  # ===================================================================
  ai:
    # --- Настройки локальной модели Ollama ---
    ollama:
      # URL API Ollama, который будет запущен в Docker
      base-url: http://localhost:11434
      chat:
        options:
          # Модель, которую будет использовать Ollama. Убедитесь, что она загружена (ollama pull llama3)
          model: llama3
          # Температура влияет на "креативность" ответов. 0 - детерминированный, >1 - очень случайный.
          temperature: 0.7
          # Максимальное количество токенов в ответе
          max-tokens: 2048

    # --- Настройки векторного хранилища PgVector ---
    vectorstore:
      pgvector:
        # Имя таблицы для хранения векторов
        table-name: vector_store
        # Тип индекса для быстрого поиска. HNSW - современный и эффективный.
        index-type: HNSW
        # Метрика для измерения "расстояния" между векторами. COSINE_DISTANCE - стандарт для текстовых эмбеддингов.
        distance-type: COSINE_DISTANCE
        # Размерность векторов. Должна соответствовать модели эмбеддингов.
        # Модель по умолчанию 'mxbai-embed-large' генерирует векторы размерностью 1024.
        dimensions: 1024

# ===================================================================
# Настройки Actuator для мониторинга (Observability)
# ===================================================================
management:
  endpoints:
    web:
      exposure:
        # Явно указываем эндпоинты, которые должны быть доступны.
        # '*' - небезопасно для продакшена.
        include: health, info, prometheus
  endpoint:
    health:
      # Показываем детали состояния компонентов только авторизованным пользователям
      show-details: when_authorized
  metrics:
    # Добавляем тег с именем приложения ко всем метрикам для удобства в Prometheus/Grafana
    tags:
      application: ${spring.application.name}

# ===================================================================
# Настройки OpenAPI / Swagger
# ===================================================================
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
  # Устанавливаем медиа-типы по умолчанию для всех эндпоинтов
  default-consumes-media-type: application/json
  default-produces-media-type: application/json

# ===================================================================
# Настройки логирования
# ===================================================================
logging:
  level:
    root: INFO
    # Включаем DEBUG-уровень для нашего кода для более детального логгирования
    com.example.ragollama: DEBUG
    # Включаем логирование SQL-запросов через фреймворк логирования
    org.hibernate.SQL: DEBUG
    # Включаем логирование параметров SQL-запросов. Крайне полезно для отладки.
    org.hibernate.type.descriptor.sql: TRACE