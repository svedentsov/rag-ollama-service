package com.example.ragollama.agent;

import java.util.List;

/**
 * Определяет контракт для самодостаточного, переиспользуемого конвейера AI-агентов.
 *
 * <p>Каждая реализация этого интерфейса представляет собой одну "Стратегию" или
 * бизнес-процесс, который может быть выполнен {@link AgentOrchestratorService}.
 * Эта версия использует модель "этапов" (`stages`), где каждый этап — это
 * список агентов. Агенты внутри одного этапа могут выполняться параллельно,
 * а сами этапы выполняются строго последовательно.
 *
 * <p>Это позволяет создавать сложные и производительные конвейеры, оптимизируя
 * выполнение независимых задач.
 */
public interface AgentPipeline {

    /**
     * Возвращает уникальное, машиночитаемое имя конвейера.
     *
     * @return Имя конвейера (например, "bug-reproduction-pipeline").
     */
    String getName();

    /**
     * Возвращает упорядоченный список этапов, составляющих этот конвейер.
     * <p>
     * Каждый внутренний список представляет собой один этап. Агенты в этом списке
     * будут запущены параллельно. Следующий этап начнется только после
     * завершения всех агентов в предыдущем.
     *
     * @return Список этапов, где каждый этап — это список агентов {@link QaAgent}.
     */
    List<List<QaAgent>> getStages();
}
