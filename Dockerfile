# =========================================================================
# ЭТАП 1: Сборка бэкенда с оптимизированным кешированием Docker-слоев
# =========================================================================
# Используем официальный образ Gradle с нужной версией JDK для консистентности сборочной среды.
FROM gradle:8.8-jdk21 AS builder

# Устанавливаем рабочую директорию внутри контейнера.
WORKDIR /app

# --- ШАГ 1: Копирование файлов сборки ---
# Этот слой будет пересобираться ТОЛЬКО при изменении зависимостей или настроек Gradle.
# Это самый редко изменяемый слой, что максимизирует использование кэша.
COPY build.gradle settings.gradle ./
COPY gradlew .
COPY gradle ./gradle

# --- ШАГ 2: Загрузка зависимостей ---
# Запускаем задачу `dependencies`, чтобы Gradle скачал все зависимости проекта.
# Этот шаг является самым долгим и будет закеширован Docker'ом. Он будет
# повторно выполнен, только если файлы из ШАГА 1 изменились.
# Флаги `--no-daemon`, `--stacktrace`, `--info` - лучшие практики для CI/CD.
# `|| true` - хак, чтобы сборка не падала, если нет lock-файлов.
RUN ./gradlew dependencies --no-daemon --stacktrace --info || true

# --- ШАГ 3: Копирование исходного кода ---
# Копируем исходный код приложения. Этот слой будет пересобираться при каждом
# изменении кода, но предыдущие, более "тяжелые" слои уже будут в кэше.
COPY src ./src

# --- ШАГ 4: Сборка приложения ---
# Собираем финальный JAR-файл. Пропускаем тесты (`-x test`), так как их
# следует запускать в отдельном шаге CI/CD конвейера.
# Этот шаг будет быстрым, так как все зависимости уже загружены.
RUN ./gradlew bootJar -x test --no-daemon --stacktrace

# =========================================================================
# ЭТАП 2: Финальный, легковесный и безопасный образ для production
# =========================================================================
# Используем минималистичный образ Eclipse Temurin JRE на базе Ubuntu Jammy.
# Он не содержит компилятора и других инструментов для разработки, что уменьшает
# размер образа и поверхность для атак.
FROM eclipse-temurin:21-jre-jammy

WORKDIR /app

# --- Повышение безопасности: создаем пользователя с ограниченными правами ---
# Запуск приложения от имени non-root пользователя является критически важной
# мерой безопасности для минимизации ущерба в случае компрометации приложения.
RUN groupadd --system --gid 1000 appgroup && useradd --system --uid 1000 --gid appgroup appuser

# Копируем собранный JAR-файл бэкенда из этапа сборки.
COPY --from=builder /app/build/libs/*.jar app.jar

# Устанавливаем владельца для файлов приложения.
RUN chown appuser:appgroup app.jar

# Переключаемся на пользователя с ограниченными правами.
# Все последующие команды будут выполняться от его имени.
USER appuser

# Указываем порт, который будет слушать приложение.
EXPOSE 8080

# Запускаем приложение. Используем формат exec form `[]`, который является
# предпочтительным для ENTRYPOINT.
ENTRYPOINT ["java", "-jar", "app.jar"]