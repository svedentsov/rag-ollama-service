# --- Этап 1: Сборка проекта ---
# Используем образ с полным JDK и Maven для компиляции и сборки Java-приложения.
# Это позволяет не устанавливать Maven и JDK на хост-машине.
FROM maven:3.9.6-eclipse-temurin-21 AS build

# Устанавливаем рабочую директорию внутри контейнера
WORKDIR /app

# Копируем pom.xml. Этот слой будет кэширован, если pom.xml не изменится,
# что ускоряет последующие сборки, т.к. зависимости не будут скачиваться заново.
COPY pom.xml .

# Скачиваем все зависимости, определенные в pom.xml.
RUN mvn dependency:go-offline

# Копируем исходный код проекта
COPY src ./src

# Собираем приложение в исполняемый JAR-файл.
# Пропускаем тесты, так как их следует запускать отдельно в CI/CD пайплайне.
RUN mvn package -DskipTests

# --- Этап 2: Запуск приложения ---
# Используем минималистичный образ с JRE. Это уменьшает размер финального образа
# и повышает безопасность, т.к. в нем нет инструментов для компиляции.
FROM eclipse-temurin:21-jre-jammy

# Устанавливаем рабочую директорию
WORKDIR /app

# Определяем аргумент для пути к JAR-файлу, который будет создан на этапе сборки.
ARG JAR_FILE=/app/target/*.jar

# Копируем собранный JAR-файл из стадии 'build' в текущий образ.
COPY --from=build ${JAR_FILE} app.jar

# Сообщаем Docker, что контейнер будет слушать на порту 8080.
EXPOSE 8080

# Команда, которая будет выполнена при запуске контейнера.
ENTRYPOINT ["java", "-jar", "app.jar"]