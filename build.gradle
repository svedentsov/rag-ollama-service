plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.5'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
}

ext {
    springAiVersion = '1.0.1'
    mapstructVersion = '1.5.5.Final'
    testcontainersVersion = '1.19.8'
    lombokVersion = '1.18.32'
    resilience4jVersion = '2.3.0'
    jgitVersion = '6.9.0.202403050737-r'
    swaggerParserVersion = '2.1.22'

    // Flyway + PG
    flywayVersion = '11.11.1'
    flywayPostgresModuleVersion = "${flywayVersion}"
    postgresqlVersion = '42.7.7'
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
        mavenBom "io.github.resilience4j:resilience4j-bom:${resilience4jVersion}"
    }
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'org.springframework.boot:spring-boot-starter-freemarker'

    // HTTP-клиент Reactor Netty, необходимый для WebClient
    implementation 'io.projectreactor.netty:reactor-netty-http'

    // Spring AI
    implementation 'org.springframework.ai:spring-ai-starter-model-ollama'
    implementation 'org.springframework.ai:spring-ai-starter-vector-store-pgvector'

    // Flyway (core + pg module)
    implementation "org.flywaydb:flyway-core:${flywayVersion}"
    implementation "org.flywaydb:flyway-database-postgresql:${flywayPostgresModuleVersion}"

    // PostgreSQL JDBC
    runtimeOnly "org.postgresql:postgresql:${postgresqlVersion}"

    // JAXB / XML (для OpenAPI/Jackson/JAXB-совместимости)
    runtimeOnly 'javax.xml.bind:jaxb-api:2.3.1'
    runtimeOnly 'org.glassfish.jaxb:jaxb-runtime:2.3.3'
    implementation 'com.fasterxml.jackson.module:jackson-module-jaxb-annotations'

    // Утилиты и Code Generation
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    compileOnly "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    implementation 'com.github.javaparser:javaparser-core:3.27.0'
    implementation 'net.sourceforge.pmd:pmd-java:7.16.0'

    // Observability & Docs
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'io.micrometer:context-propagation:1.1.1'
    implementation 'org.jsoup:jsoup:1.17.2'

    // JAXB API for OpenAPI/Swagger compatibility on Java 11+ (jakarta)
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.2'
    runtimeOnly 'org.glassfish.jaxb:jaxb-runtime:4.0.5'

    // Графовая база данных Neo4j
    implementation 'org.springframework.boot:spring-boot-starter-data-neo4j'

    // Библиотека для статистического анализа
    implementation 'org.apache.commons:commons-math3:3.6.1'

    // Отказоустойчивость и RAG-компоненты
    implementation 'io.github.resilience4j:resilience4j-spring-boot3'
    implementation 'io.github.resilience4j:resilience4j-reactor'
    implementation 'com.bucket4j:bucket4j_jdk17-core:8.14.0'
    implementation 'com.knuddels:jtokkit:1.1.0'
    implementation 'io.hypersistence:hypersistence-utils-hibernate-63:3.8.1'

    // Инструменты агентов
    implementation "org.eclipse.jgit:org.eclipse.jgit:${jgitVersion}"
    implementation "io.swagger.parser.v3:swagger-parser:${swaggerParserVersion}"

    // Тестирование
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.awaitility:awaitility:4.2.1'
}

tasks.withType(Test) {
    useJUnitPlatform()
}

bootJar {
    archiveFileName = 'app.jar'
}
