plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.5'
    id "com.github.node-gradle.node" version "7.0.2"
}

group = 'com.example.ragollama'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
}

ext {
    springAiVersion = '1.0.1'
    mapstructVersion = '1.5.5.Final'
    testcontainersVersion = '1.19.8'
    lombokVersion = '1.18.32'
    resilience4jVersion = '2.3.0'
    jgitVersion = '6.9.0.202403050737-r'
    swaggerParserVersion = '2.1.22'
    springdocOpenapiVersion = '2.6.0'
    jtokkitVersion = '1.1.0'
    javaparserVersion = '3.27.0'
    pmdVersion = '7.16.0'
    bucket4jVersion = '8.14.0'
    playwrightVersion = '1.44.0'
    commonsMathVersion = '3.6.1'
    awaitilityVersion = '4.2.1'
    lombokMapstructBindingVersion = '0.2.0'
    djlVersion = '0.27.0'
    guavaVersion = '33.2.1-jre'
    jsoupVersion = '1.17.2'
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://djl-ai.s3.amazonaws.com/mlrepo/repo/' }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
        mavenBom "io.github.resilience4j:resilience4j-bom:${resilience4jVersion}"
        mavenBom "ai.djl:bom:${djlVersion}"
    }
}

dependencies {
    // Spring Boot Starters (Reactive Stack & JDBC)
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-freemarker'
    implementation 'org.springframework.boot:spring-boot-starter-data-neo4j'
    implementation 'io.projectreactor.netty:reactor-netty-http'

    // Spring AI & RAG
    implementation 'org.springframework.ai:spring-ai-starter-model-ollama'
    implementation 'org.springframework.ai:spring-ai-starter-vector-store-pgvector'
    implementation "com.knuddels:jtokkit:${jtokkitVersion}"

    // Локальные ML модели для Reranking (Cross-Encoder)
    implementation "ai.djl.pytorch:pytorch-engine:0.29.0"
    implementation "ai.djl.huggingface:tokenizers:${djlVersion}"

    // Database & Persistence
    runtimeOnly "org.postgresql:postgresql"
    implementation 'org.postgresql:r2dbc-postgresql'
    implementation "org.flywaydb:flyway-core"
    implementation "org.flywaydb:flyway-database-postgresql"

    // Resilience & Rate Limiting
    implementation 'io.github.resilience4j:resilience4j-spring-boot3'
    implementation 'io.github.resilience4j:resilience4j-reactor'
    implementation "com.bucket4j:bucket4j_jdk17-core:${bucket4jVersion}"

    // Observability & API Docs
    implementation "org.springdoc:springdoc-openapi-starter-webflux-ui:${springdocOpenapiVersion}"
    implementation "io.micrometer:micrometer-registry-prometheus"
    implementation "io.micrometer:context-propagation"

    // Code Generation & Utilities
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    compileOnly "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"
    implementation "org.jsoup:jsoup:${jsoupVersion}"
    implementation "com.google.guava:guava:${guavaVersion}"

    // Agent Tooling & Code Analysis
    implementation "com.github.javaparser:javaparser-core:${javaparserVersion}"
    implementation "net.sourceforge.pmd:pmd-java:${pmdVersion}"
    implementation "org.eclipse.jgit:org.eclipse.jgit:${jgitVersion}"
    implementation "io.swagger.parser.v3:swagger-parser:${swaggerParserVersion}"
    implementation "com.microsoft.playwright:playwright:${playwrightVersion}"
    implementation "org.apache.commons:commons-math3:${commonsMathVersion}"

    // JAXB API for Java 11+ compatibility with swagger-parser and other libraries
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.0'
    runtimeOnly 'org.glassfish.jaxb:jaxb-runtime:4.0.2'

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation "org.awaitility:awaitility:${awaitilityVersion}"
}

node {
    version = '20.11.1'
    npmVersion = '10.2.4'
    download = true
    nodeProjectDir = file("${project.projectDir}/src/main/resources/frontend")
}

tasks.named('npm_run_build') {
    dependsOn(tasks.named('npmInstall'))
}

// Связываем сборку фронтенда с жизненным циклом сборки бэкенда
processResources.dependsOn(tasks.named('npm_run_build'))

tasks.withType(Test) {
    useJUnitPlatform()
}

bootJar {
    archiveFileName = 'app.jar'
    from("src/main/resources/frontend/dist") {
        into "static/assets"
    }
}
